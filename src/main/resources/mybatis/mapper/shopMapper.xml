<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pg.flex.dao.shop.ShopDao">

  <resultMap id="ProductResultMap" type="com.pg.flex.dto.response.ProductResponse">
    <result column="product_index" property="productIndex" />
    <result column="product_name" property="productName" />
    <result column="product_price" property="productPrice" />
    <result column="thumb_saved_file_name" property="thumbSavedFileName" />
    <result column="detail_saved_file_name" property="detailSavedFileName" />
    <result column="category_index" property="categoryIndex" />
    <result column="brand_index" property="brandIndex" />
    <result column="gender_index" property="genderIndex" />
    <result column="category_name" property="categoryName" />
    <result column="brand_name" property="brandName" />
    <result column="gender_name" property="genderName" />
  </resultMap>

  <resultMap id="BrandResultMap" type="com.pg.flex.dto.Brand">
    <result column="brand_index" property="brandIndex" />
    <result column="brand_name" property="brandName" />
  </resultMap>

  <resultMap id="GenderResultMap" type="com.pg.flex.dto.Gender">
    <result column="gender_index" property="genderIndex" />
    <result column="gender_name" property="genderName" />
  </resultMap>

  <resultMap id="CategoryResultMap" type="com.pg.flex.dto.Category">
    <result column="category_index" property="categoryIndex" />
    <result column="category_name" property="categoryName" />
  </resultMap>

  <resultMap id="ProductImageResponse" type="com.pg.flex.dto.ProductImage">
    <result column="image_index" property="imgIndex" />
    <result column="product_index" property="productIndex" />
    <result column="original_file_name" property="originalFileName" />
    <result column="saved_file_name" property="savedFileName" />
    <result column="is_thumb" property="isThumb" />
  </resultMap>

  <resultMap id="IsLikedResponse" type="com.pg.flex.dto.response.IsLikedResponse">
    <result column="like_index" property="likeIndex" />
    <result column="product_index" property="productIndex" />
    <result column="user_id" property="userId" />
  </resultMap>

  <select id="getProducts" resultMap="ProductResultMap">
    SELECT
      p.product_index,
      p.product_name,
      p.product_price,
      P.thumb_saved_file_name,
      P.detail_saved_file_name,
      c.category_index,
      b.brand_index,
      g.gender_index,
      c.category_name,
      b.brand_name,
      g.gender_name
    FROM
      product AS p
    INNER JOIN
      category AS c
    ON
      p.category = c.category_index
    INNER JOIN
      brand AS b
    ON
      p.brand=b.brand_index
    INNER JOIN
      gender g
    ON
      p.gender = g.gender_index
  </select>

  <!-- 상품상세 페이지(1개씩 가져오기) -->

  <select id="getProductByProductIndex" parameterType="int" resultMap="ProductResultMap">
    SELECT
      p.product_index,
      p.product_name,
      p.product_price,
      P.thumb_saved_file_name,
      P.detail_saved_file_name,
      c.category_index,
      b.brand_index,
      g.gender_index,
      c.category_name,
      b.brand_name,
      g.gender_name
    FROM
      product AS p
    INNER JOIN
      category AS c
    ON
      p.category = c.category_index
    INNER JOIN
      brand AS b
    ON
      p.brand = b.brand_index
    INNER JOIN
      gender g
    ON
      p.gender = g.gender_index
    WHERE
      p.product_index = #{productIndex}
  </select>


  <!-- Mypage에 관련상품선택 API -->

<select id="getProductsRelation" parameterType="string" resultMap="ProductResultMap">
  SELECT
	  p.product_index,
	  p.product_name,
	  b.brand_name
  FROM
	  product AS p
  INNER JOIN 
    brand AS b
  ON
	  p.product_brand=b.brand_index
  <if test="#{search} != null"> 
    WHERE 
      p.product_name=#{search} 
    OR
      b.brand_name=#{search} 
  </if>
</select>

<select id="getCategories" resultMap="CategoryResultMap">
  SELECT
    category_index,
    category_name
  FROM
    category
</select>

<select id="getGender" resultMap="GenderResultMap">
  SELECT
    gender_index,
    gender_name
  FROM
    gender
</select>

<select id="getBrands" resultMap="BrandResultMap">
  SELECT
    brand_index,
    brand_name
  FROM
    brand
</select>

<!-- <insert id="addProduct" parameterType="com.pg.flex.dto.ProductEditRequest" useGeneratedKeys="true" keyColumn="product_index" keyProperty="productIndex">
  INSERT INTO 
    product (product_name, product_brand, product_price, category_index, sex)
  VALUES
    (#{productName}, #{brandIndex}, #{productPrice}, #{categoryIndex}, #{sexIndex})
</insert> -->

<insert id="postProduct" parameterType="com.pg.flex.dto.query.ProductQuery">
  INSERT INTO
    product (product_name, product_price, thumb_saved_file_name, detail_saved_file_name, category, brand, gender)
  VALUES
    (#{productName}, #{productPrice}, #{thumbSavedFileName}, #{detailSavedFileName}, #{category}, #{brand}, #{gender})
</insert>

<insert id="postProductImage">
  INSERT INTO 
    product_image (product_index, original_file_name, saved_file_name, is_thumb)
  VALUES
    (#{productIndex}, #{originalFileName}, #{savedFileName}, #{isThumb})
</insert>

<select id="getProductImageByProductImage" parameterType="int" resultMap="ProductImageResponse">
  SELECT
    *
  FROM
    product_image
  WHERE
    product_index = #{productIndex}
</select>

<select id="isLiked" parameterType="com.pg.flex.dto.request.IsLiked" resultMap="IsLikedResponse">
  SELECT
    *
  FROM
    product_like
  WHERE
    product_index = #{productIndex}
  AND
    user_id = #{userId}
</select>

<insert id="addLike" parameterType="com.pg.flex.dto.request.IsLiked">
  INSERT INTO
    product_like (product_index, user_id)
  VALUES
    (#{productIndex}, #{userId})
</insert>

<delete id="deleteLike" parameterType="com.pg.flex.dto.response.IsLikedResponse">
  DELETE FROM
    product_like
  WHERE
    like_index = #{likeIndex}
</delete>

<insert id="addToCart" parameterType="com.pg.flex.dto.request.IsLiked">
  INSERT INTO
    cart (product_index, user_id)
  VALUES
    (#{productIndex}, #{userId})
</insert>

</mapper>